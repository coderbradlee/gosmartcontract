PragmaDirective
   Source: "pragma solidity ^0.5.6;"
ContractDefinition "ERC721"
   Source: "interface ERC721\n{\n\n  /**\n   * @dev Emits when ownership of any NFT changes by any mechanism. This event emits when NFTs are\n   * created (`from` == 0) and destroyed (`to` == 0). Exception: during contract creation, any\n   * number of NFTs may be created and assigned without emitting Transfer. At the time of any\n   * transfer, the approved address for that NFT (if any) is reset to none.\n   */\n  event Transfer(\n    address indexed _from,\n    address indexed _to,\n    uint256 indexed _tokenId\n  );\n\n  /**\n   * @dev This emits when the approved address for an NFT is changed or reaffirmed. The zero\n   * address indicates there is no approved address. When a Transfer event emits, this also\n   * indicates that the approved address for that NFT (if any) is reset to none.\n   */\n  event Approval(\n    address indexed _owner,\n    address indexed _approved,\n    uint256 indexed _tokenId\n  );\n\n  /**\n   * @dev This emits when an operator is enabled or disabled for an owner. The operator can manage\n   * all NFTs of the owner.\n   */\n  event ApprovalForAll(\n    address indexed _owner,\n    address indexed _operator,\n    bool _approved\n  );\n\n  /**\n   * @dev Transfers the ownership of an NFT from one address to another address.\n   * @notice Throws unless `msg.sender` is the current owner, an authorized operator, or the\n   * approved address for this NFT. Throws if `_from` is not the current owner. Throws if `_to` is\n   * the zero address. Throws if `_tokenId` is not a valid NFT. When transfer is complete, this\n   * function checks if `_to` is a smart contract (code size > 0). If so, it calls\n   * `onERC721Received` on `_to` and throws if the return value is not \n   * `bytes4(keccak256(\"onERC721Received(address,uint256,bytes)\"))`.\n   * @param _from The current owner of the NFT.\n   * @param _to The new owner.\n   * @param _tokenId The NFT to transfer.\n   * @param _data Additional data with no specified format, sent in call to `_to`.\n   */\n  function safeTransferFrom(\n    address _from,\n    address _to,\n    uint256 _tokenId,\n    bytes calldata _data\n  )\n    external;\n\n  /**\n   * @dev Transfers the ownership of an NFT from one address to another address.\n   * @notice This works identically to the other function with an extra data parameter, except this\n   * function just sets data to \"\"\n   * @param _from The current owner of the NFT.\n   * @param _to The new owner.\n   * @param _tokenId The NFT to transfer.\n   */\n  function safeTransferFrom(\n    address _from,\n    address _to,\n    uint256 _tokenId\n  )\n    external;\n\n  /**\n   * @dev Throws unless `msg.sender` is the current owner, an authorized operator, or the approved\n   * address for this NFT. Throws if `_from` is not the current owner. Throws if `_to` is the zero\n   * address. Throws if `_tokenId` is not a valid NFT.\n   * @notice The caller is responsible to confirm that `_to` is capable of receiving NFTs or else\n   * they mayb be permanently lost.\n   * @param _from The current owner of the NFT.\n   * @param _to The new owner.\n   * @param _tokenId The NFT to transfer.\n   */\n  function transferFrom(\n    address _from,\n    address _to,\n    uint256 _tokenId\n  )\n    external;\n\n  /**\n   * @dev Set or reaffirm the approved address for an NFT.\n   * @notice The zero address indicates there is no approved address. Throws unless `msg.sender` is\n   * the current NFT owner, or an authorized operator of the current owner.\n   * @param _approved The new approved NFT controller.\n   * @param _tokenId The NFT to approve.\n   */\n  function approve(\n    address _approved,\n    uint256 _tokenId\n  )\n    external;\n\n  /**\n   * @dev Enables or disables approval for a third party (\"operator\") to manage all of\n   * `msg.sender`'s assets. It also emits the ApprovalForAll event.\n   * @notice The contract MUST allow multiple operators per owner.\n   * @param _operator Address to add to the set of authorized operators.\n   * @param _approved True if the operators is approved, false to revoke approval.\n   */\n  function setApprovalForAll(\n    address _operator,\n    bool _approved\n  )\n    external;\n\n  /**\n   * @dev Returns the number of NFTs owned by `_owner`. NFTs assigned to the zero address are\n   * considered invalid, and this function throws for queries about the zero address.\n   * @param _owner Address for whom to query the balance.\n   * @return Balance of _owner.\n   */\n  function balanceOf(\n    address _owner\n  )\n    external\n    view\n    returns (uint256);\n\n  /**\n   * @dev Returns the address of the owner of the NFT. NFTs assigned to zero address are considered\n   * invalid, and queries about them do throw.\n   * @param _tokenId The identifier for an NFT.\n   * @return Address of _tokenId owner.\n   */\n  function ownerOf(\n    uint256 _tokenId\n  )\n    external\n    view\n    returns (address);\n    \n  /**\n   * @dev Get the approved address for a single NFT.\n   * @notice Throws if `_tokenId` is not a valid NFT.\n   * @param _tokenId The NFT to find the approved address for.\n   * @return Address that _tokenId is approved for. \n   */\n  function getApproved(\n    uint256 _tokenId\n  )\n    external\n    view\n    returns (address);\n\n  /**\n   * @dev Returns true if `_operator` is an approved operator for `_owner`, false otherwise.\n   * @param _owner The address that owns the NFTs.\n   * @param _operator The address that acts on behalf of the owner.\n   * @return True if approved for all, false otherwise.\n   */\n  function isApprovedForAll(\n    address _owner,\n    address _operator\n  )\n    external\n    view\n    returns (bool);\n\n}"
  EventDefinition "Transfer"
     Source: "event Transfer(\n    address indexed _from,\n    address indexed _to,\n    uint256 indexed _tokenId\n  );"
    ParameterList
       Source: "(\n    address indexed _from,\n    address indexed _to,\n    uint256 indexed _tokenId\n  )"
      VariableDeclaration "_from"
         Type: address
         Source: "address indexed _from"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_to"
         Type: address
         Source: "address indexed _to"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_tokenId"
         Type: uint256
         Source: "uint256 indexed _tokenId"
        ElementaryTypeName uint256
           Source: "uint256"
  EventDefinition "Approval"
     Source: "event Approval(\n    address indexed _owner,\n    address indexed _approved,\n    uint256 indexed _tokenId\n  );"
    ParameterList
       Source: "(\n    address indexed _owner,\n    address indexed _approved,\n    uint256 indexed _tokenId\n  )"
      VariableDeclaration "_owner"
         Type: address
         Source: "address indexed _owner"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_approved"
         Type: address
         Source: "address indexed _approved"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_tokenId"
         Type: uint256
         Source: "uint256 indexed _tokenId"
        ElementaryTypeName uint256
           Source: "uint256"
  EventDefinition "ApprovalForAll"
     Source: "event ApprovalForAll(\n    address indexed _owner,\n    address indexed _operator,\n    bool _approved\n  );"
    ParameterList
       Source: "(\n    address indexed _owner,\n    address indexed _operator,\n    bool _approved\n  )"
      VariableDeclaration "_owner"
         Type: address
         Source: "address indexed _owner"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_operator"
         Type: address
         Source: "address indexed _operator"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_approved"
         Type: bool
         Source: "bool _approved"
        ElementaryTypeName bool
           Source: "bool"
  FunctionDefinition "safeTransferFrom" - public
     Source: "function safeTransferFrom(\n    address _from,\n    address _to,\n    uint256 _tokenId,\n    bytes calldata _data\n  )\n    external;"
    ParameterList
       Source: "(\n    address _from,\n    address _to,\n    uint256 _tokenId,\n    bytes calldata _data\n  )"
      VariableDeclaration "_from"
         Type: address
         Source: "address _from"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_to"
         Type: address
         Source: "address _to"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_tokenId"
         Type: uint256
         Source: "uint256 _tokenId"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "_data"
         Type: bytes calldata
         Source: "bytes calldata _data"
        ElementaryTypeName bytes
           Source: "bytes"
    ParameterList
       Source: ""
  FunctionDefinition "safeTransferFrom" - public
     Source: "function safeTransferFrom(\n    address _from,\n    address _to,\n    uint256 _tokenId\n  )\n    external;"
    ParameterList
       Source: "(\n    address _from,\n    address _to,\n    uint256 _tokenId\n  )"
      VariableDeclaration "_from"
         Type: address
         Source: "address _from"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_to"
         Type: address
         Source: "address _to"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_tokenId"
         Type: uint256
         Source: "uint256 _tokenId"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Source: ""
  FunctionDefinition "transferFrom" - public
     Source: "function transferFrom(\n    address _from,\n    address _to,\n    uint256 _tokenId\n  )\n    external;"
    ParameterList
       Source: "(\n    address _from,\n    address _to,\n    uint256 _tokenId\n  )"
      VariableDeclaration "_from"
         Type: address
         Source: "address _from"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_to"
         Type: address
         Source: "address _to"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_tokenId"
         Type: uint256
         Source: "uint256 _tokenId"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Source: ""
  FunctionDefinition "approve" - public
     Source: "function approve(\n    address _approved,\n    uint256 _tokenId\n  )\n    external;"
    ParameterList
       Source: "(\n    address _approved,\n    uint256 _tokenId\n  )"
      VariableDeclaration "_approved"
         Type: address
         Source: "address _approved"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_tokenId"
         Type: uint256
         Source: "uint256 _tokenId"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Source: ""
  FunctionDefinition "setApprovalForAll" - public
     Source: "function setApprovalForAll(\n    address _operator,\n    bool _approved\n  )\n    external;"
    ParameterList
       Source: "(\n    address _operator,\n    bool _approved\n  )"
      VariableDeclaration "_operator"
         Type: address
         Source: "address _operator"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_approved"
         Type: bool
         Source: "bool _approved"
        ElementaryTypeName bool
           Source: "bool"
    ParameterList
       Source: ""
  FunctionDefinition "balanceOf" - public - const
     Source: "function balanceOf(\n    address _owner\n  )\n    external\n    view\n    returns (uint256);"
    ParameterList
       Source: "(\n    address _owner\n  )"
      VariableDeclaration "_owner"
         Type: address
         Source: "address _owner"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Source: "(uint256)"
      VariableDeclaration ""
         Type: uint256
         Source: "uint256"
        ElementaryTypeName uint256
           Source: "uint256"
  FunctionDefinition "ownerOf" - public - const
     Source: "function ownerOf(\n    uint256 _tokenId\n  )\n    external\n    view\n    returns (address);"
    ParameterList
       Source: "(\n    uint256 _tokenId\n  )"
      VariableDeclaration "_tokenId"
         Type: uint256
         Source: "uint256 _tokenId"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Source: "(address)"
      VariableDeclaration ""
         Type: address
         Source: "address"
        ElementaryTypeName address
           Source: "address"
  FunctionDefinition "getApproved" - public - const
     Source: "function getApproved(\n    uint256 _tokenId\n  )\n    external\n    view\n    returns (address);"
    ParameterList
       Source: "(\n    uint256 _tokenId\n  )"
      VariableDeclaration "_tokenId"
         Type: uint256
         Source: "uint256 _tokenId"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Source: "(address)"
      VariableDeclaration ""
         Type: address
         Source: "address"
        ElementaryTypeName address
           Source: "address"
  FunctionDefinition "isApprovedForAll" - public - const
     Source: "function isApprovedForAll(\n    address _owner,\n    address _operator\n  )\n    external\n    view\n    returns (bool);"
    ParameterList
       Source: "(\n    address _owner,\n    address _operator\n  )"
      VariableDeclaration "_owner"
         Type: address
         Source: "address _owner"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_operator"
         Type: address
         Source: "address _operator"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Source: "(bool)"
      VariableDeclaration ""
         Type: bool
         Source: "bool"
        ElementaryTypeName bool
           Source: "bool"

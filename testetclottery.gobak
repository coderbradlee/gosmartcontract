package main

import (
	"fmt"
	"log"
	"math/big"
	// "time"
	"crypto/ecdsa"
	// "./Divies"
	// "./PlayerBook"
	// fomo3d "./FomoETC"
	// "./testinterface"
	etclottery "./etclottery"
	"context"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	// "github.com/ethereum/go-ethereum/accounts/abi/bind/backends"
	// "github.com/ethereum/go-ethereum/core"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/crypto"
	"github.com/ethereum/go-ethereum/ethclient"
)

const (
	selfhost        = "http://172.16.5.7:18545"
	contractAddress = "0xcaef029f14255a3470a7efcd9b10ff4fc37fc6b6"
)

func testetclotteryadmin() { //conn to testrpc method
	client, err := ethclient.Dial(selfhost)
	if err != nil {
		log.Fatalf("Failed to connect to the Ethereum client: %v", err)
	}
	{
		privateKey, err := crypto.HexToECDSA("1a65bef07e8cfedeb61337694b31c71b8b8284dc80aa78d94638ad0202d51e79")
		if err != nil {
			fmt.Println(err)
		}

		publicKey := privateKey.Public()
		publicKeyECDSA, ok := publicKey.(*ecdsa.PublicKey)
		if !ok {
			fmt.Println("error casting public key to ECDSA")
		}

		fromAddress := crypto.PubkeyToAddress(*publicKeyECDSA)
		nonce, err := client.PendingNonceAt(context.Background(), fromAddress)
		if err != nil {
			fmt.Println(err)
		}

		gasPrice, err := client.SuggestGasPrice(context.Background())
		if err != nil {
			fmt.Println(err)
		}

		auth := bind.NewKeyedTransactor(privateKey)
		auth.Nonce = big.NewInt(int64(nonce))
		// auth.Value = big.NewInt(1000000000000000) // in wei,0.001ether
		auth.GasLimit = uint64(300000) // in units
		auth.GasPrice = gasPrice
		// fmt.Println(auth)
		fo, _ := etclottery.NewEtclottery(common.HexToAddress(contractAddress), client)
		// {
		// 	ret1, ret2, ret3, ret4, ret5, ret6, ret7, ret8, err := fo.GetPlayerInfoByAddress(nil, fromAddress)
		// 	if err != nil {
		// 		fmt.Println(err)
		// 		return
		// 	}
		// 	fmt.Println("GetPlayerInfoByAddress: ")
		// 	fmt.Println("currentroundIn: ", ret1)
		// 	fmt.Println("lastRoundIn: ", ret2)
		// 	fmt.Println("allRoundIn: ", ret3)
		// 	fmt.Println("win: ", ret4)
		// 	fmt.Println("lastwin: ", ret5)
		// 	fmt.Println("withdrawed: ", ret6)
		// 	fmt.Println("lrnd: ", ret7)
		// 	fmt.Println("teamId: ", ret8)
		// }
		// {
		// 	ret1, err := fo.PlayerWithdraw(auth, big.NewInt(1000000000000000000))
		// 	if err != nil {
		// 		fmt.Println(err)
		// 		return
		// 	}
		// 	fmt.Println("PlayerWithdraw: ", ret1.Hash().Hex())
		// }

		{
			ret1, err := fo.GetEndowmentBalance(nil)
			if err != nil {
				fmt.Println(err)
				return
			}
			fmt.Println("GetEndowmentBalance: ", ret1)
		}
		{
			ret1, err := fo.Reinvest(auth, big.NewInt(1000000000000000000), 0)
			if err != nil {
				fmt.Println(err)
				return
			}
			fmt.Println("Reinvest: ", ret1.Hash().Hex())
		}

		{
			ret1, ret2, ret3, ret4, ret5, ret6, ret7, ret8, err := fo.GetPlayerInfoByAddress(nil, fromAddress)
			if err != nil {
				fmt.Println(err)
				return
			}
			fmt.Println("GetPlayerInfoByAddress: ")
			fmt.Println("currentroundIn: ", ret1)
			fmt.Println("lastRoundIn: ", ret2)
			fmt.Println("allRoundIn: ", ret3)
			fmt.Println("win: ", ret4)
			fmt.Println("lastwin: ", ret5)
			fmt.Println("withdrawed: ", ret6)
			fmt.Println("lrnd: ", ret7)
			fmt.Println("teamId: ", ret8)
		}

	}
}

// func testetclotterynotadmin() { //conn to testrpc method
// 	client, err := ethclient.Dial(selfhost)
// 	if err != nil {
// 		log.Fatalf("Failed to connect to the Ethereum client: %v", err)
// 	}
// 	{
// 		privateKey, err := crypto.HexToECDSA("194309de4312874e5ea2b0a083f14d6e3de24cf298d851251a4f60e2dc7ef9a6")
// 		if err != nil {
// 			fmt.Println(err)
// 		}

// 		publicKey := privateKey.Public()
// 		publicKeyECDSA, ok := publicKey.(*ecdsa.PublicKey)
// 		if !ok {
// 			fmt.Println("error casting public key to ECDSA")
// 		}

// 		fromAddress := crypto.PubkeyToAddress(*publicKeyECDSA)
// 		nonce, err := client.PendingNonceAt(context.Background(), fromAddress)
// 		if err != nil {
// 			fmt.Println(err)
// 		}

// 		gasPrice, err := client.SuggestGasPrice(context.Background())
// 		if err != nil {
// 			fmt.Println(err)
// 		}

// 		auth := bind.NewKeyedTransactor(privateKey)
// 		auth.Nonce = big.NewInt(int64(nonce))
// 		auth.Value = big.NewInt(1000000000000000) // in wei,0.001ether
// 		auth.GasLimit = uint64(300000)            // in units
// 		auth.GasPrice = gasPrice
// 		// fmt.Println(auth)
// 		fo, _ := etclottery.NewEtclottery(common.HexToAddress("0xa2c2d92ef63f198e996270139b8698909b518102"), client)
// 		{
// 			ret1, ret2, ret3, ret4, ret5, ret6, ret7, ret8, err := fo.GetPlayerInfoByAddress(nil, fromAddress)
// 			if err != nil {
// 				fmt.Println(err)
// 				return
// 			}
// 			fmt.Println("GetPlayerInfoByAddress: ")
// 			fmt.Println("currentroundIn: ", ret1)
// 			fmt.Println("lastRoundIn: ", ret2)
// 			fmt.Println("allRoundIn: ", ret3)
// 			fmt.Println("win: ", ret4)
// 			fmt.Println("lastwin: ", ret5)
// 			fmt.Println("withdrawed: ", ret6)
// 			fmt.Println("lrnd: ", ret7)
// 			fmt.Println("teamId: ", ret8)
// 		}
// 		{
// 			ret1, err := fo.PlayerWithdraw(nil, big.NewInt(1000000000000000000))
// 			if err != nil {
// 				fmt.Println(err)
// 				return
// 			}
// 			fmt.Println("PlayerWithdraw: ", ret1.Hash().Hex())
// 		}
// 		{
// 			ret1, ret2, ret3, ret4, ret5, ret6, ret7, ret8, err := fo.GetPlayerInfoByAddress(nil, fromAddress)
// 			if err != nil {
// 				fmt.Println(err)
// 				return
// 			}
// 			fmt.Println("GetPlayerInfoByAddress: ")
// 			fmt.Println("currentroundIn: ", ret1)
// 			fmt.Println("lastRoundIn: ", ret2)
// 			fmt.Println("allRoundIn: ", ret3)
// 			fmt.Println("win: ", ret4)
// 			fmt.Println("lastwin: ", ret5)
// 			fmt.Println("withdrawed: ", ret6)
// 			fmt.Println("lrnd: ", ret7)
// 			fmt.Println("teamId: ", ret8)
// 		}

// 	}
// }
